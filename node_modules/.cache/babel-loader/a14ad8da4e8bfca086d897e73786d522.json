{"ast":null,"code":"import _regeneratorRuntime from \"/Users/mileslacek/prime/tier3/prime-solo-project-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(fetchBatchInfo),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(putBatchInfo),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(removeBatchInfo),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(updateBatchInfo),\n    _marked5 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(batchSaga);\n\nimport { put, takeLatest, takeEvery } from \"redux-saga/effects\";\nimport axios from \"axios\";\n\nfunction fetchBatchInfo() {\n  var infoDetailsResponse;\n  return _regeneratorRuntime.wrap(function fetchBatchInfo$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return axios.get(\"/api/batch\");\n\n        case 3:\n          infoDetailsResponse = _context.sent;\n          // THEN SEND TO REDUX\n          console.log('saga response!', infoDetailsResponse.data); // PUT IS DISPATCH\n\n          _context.next = 7;\n          return put({\n            type: 'SET_INFO',\n            payload: infoDetailsResponse.data\n          });\n\n        case 7:\n          _context.next = 12;\n          break;\n\n        case 9:\n          _context.prev = 9;\n          _context.t0 = _context[\"catch\"](0);\n          console.log(_context.t0);\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 9]]);\n}\n\nfunction putBatchInfo(action) {\n  return _regeneratorRuntime.wrap(function putBatchInfo$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return axios.post(\"/api/batch\", action.payload);\n\n        case 3:\n          _context2.next = 5;\n          return put({\n            type: 'FETCH_BATCH_INFO'\n          });\n\n        case 5:\n          _context2.next = 10;\n          break;\n\n        case 7:\n          _context2.prev = 7;\n          _context2.t0 = _context2[\"catch\"](0);\n          console.log('ERROR IN POST', _context2.t0);\n\n        case 10:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 7]]);\n}\n\nfunction removeBatchInfo(action) {\n  var id;\n  return _regeneratorRuntime.wrap(function removeBatchInfo$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          console.log(action.payload);\n          id = action.payload.id;\n          console.log(id);\n          _context3.next = 6;\n          return axios.delete(\"/api/batch/\".concat(id), {\n            user_id: action.payload\n          });\n\n        case 6:\n          _context3.next = 8;\n          return put({\n            type: 'FETCH_BATCH_INFO'\n          });\n\n        case 8:\n          _context3.next = 13;\n          break;\n\n        case 10:\n          _context3.prev = 10;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.log(_context3.t0);\n\n        case 13:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 10]]);\n}\n\nfunction updateBatchInfo(action) {\n  return _regeneratorRuntime.wrap(function updateBatchInfo$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          console.log('updating Batch:', action.payload); // console.log(action.payload.id, action.payload.user_id, action.payload.style_id, action.payload.beer_name, action.payload.batch_name, action.payload.temp_hlt, action.payload.temp_mash_in, action.payload.temp_mash_out, action.payload.time_boil, action.payload.notes);\n\n          _context4.prev = 1;\n          _context4.next = 4;\n          return axios.put(\"/edit/update/:id\", action.payload);\n\n        case 4:\n          _context4.next = 6;\n          return put({\n            type: 'SET_INFO',\n            payload: action.payload.id\n          });\n\n        case 6:\n          _context4.next = 11;\n          break;\n\n        case 8:\n          _context4.prev = 8;\n          _context4.t0 = _context4[\"catch\"](1);\n          console.log('Error in PUT', _context4.t0);\n\n        case 11:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, null, [[1, 8]]);\n}\n\nfunction batchSaga() {\n  return _regeneratorRuntime.wrap(function batchSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return takeLatest('FETCH_BATCH_INFO', fetchBatchInfo);\n\n        case 2:\n          _context5.next = 4;\n          return takeEvery('POST_INFO', putBatchInfo);\n\n        case 4:\n          _context5.next = 6;\n          return takeLatest('DELETE_USER_BATCH', removeBatchInfo);\n\n        case 6:\n          _context5.next = 8;\n          return takeEvery('UPDATE', updateBatchInfo);\n\n        case 8:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}\n\nexport default batchSaga;","map":{"version":3,"sources":["/Users/mileslacek/prime/tier3/prime-solo-project-master/src/redux/sagas/batchSaga.js"],"names":["fetchBatchInfo","putBatchInfo","removeBatchInfo","updateBatchInfo","batchSaga","put","takeLatest","takeEvery","axios","get","infoDetailsResponse","console","log","data","type","payload","action","post","id","delete","user_id"],"mappings":"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","sourcesContent":["import { put, takeLatest, takeEvery } from \"redux-saga/effects\";\nimport axios from \"axios\";\n\n\nfunction* fetchBatchInfo() {\n    try{\n        // GET THE INFO FROM OUR SERVER\n        const infoDetailsResponse = yield axios.get(`/api/batch`);\n        // THEN SEND TO REDUX\n        console.log('saga response!', infoDetailsResponse.data);\n        // PUT IS DISPATCH\n        yield put ({\n            type: 'SET_INFO',\n            payload: infoDetailsResponse.data\n        });\n        \n    }catch (error) {\n        console.log(error);\n    }\n}\n\nfunction* putBatchInfo(action) {\n    try{\n        // POST THE ITEMS FROM OUR SERVER\n        yield axios.post(`/api/batch`, action.payload)\n    \n        yield put ({\n            type: 'FETCH_BATCH_INFO',\n        })\n    }catch(error){\n        console.log('ERROR IN POST', error);\n    }\n}\n\nfunction* removeBatchInfo(action) {\n    try{\n        console.log(action.payload);\n        let id = action.payload.id\n        console.log(id);\n        \n        yield axios.delete(`/api/batch/${id}`, {user_id: action.payload});\n        yield put ({\n            type: 'FETCH_BATCH_INFO'\n        })\n    }catch(error){\n        console.log(error);\n    }\n}\n\nfunction* updateBatchInfo(action) {\n    console.log('updating Batch:', action.payload);\n    // console.log(action.payload.id, action.payload.user_id, action.payload.style_id, action.payload.beer_name, action.payload.batch_name, action.payload.temp_hlt, action.payload.temp_mash_in, action.payload.temp_mash_out, action.payload.time_boil, action.payload.notes);\n    try{\n        yield axios.put(`/edit/update/:id`, action.payload);\n        yield put ({\n            type: 'SET_INFO',\n            payload: action.payload.id\n        })\n    }catch (error) {\n        console.log('Error in PUT', error)\n    }\n}\n\nfunction* batchSaga() {\n    yield takeLatest('FETCH_BATCH_INFO', fetchBatchInfo);\n    yield takeEvery('POST_INFO', putBatchInfo);\n    yield takeLatest('DELETE_USER_BATCH', removeBatchInfo);\n    yield takeEvery('UPDATE', updateBatchInfo);\n}\n\nexport default batchSaga;"]},"metadata":{},"sourceType":"module"}