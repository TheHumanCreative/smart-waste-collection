{"ast":null,"code":"import _regeneratorRuntime from \"/Users/mileslacek/prime/tier3/prime-solo-project-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(fetchBatchInfo),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(putBatchInfo),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(removeBatchInfo),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(batchSaga);\n\nimport { put, takeLatest } from \"redux-saga/effects\";\nimport axios from \"axios\";\n\nfunction fetchBatchInfo() {\n  var infoDetailsResponse;\n  return _regeneratorRuntime.wrap(function fetchBatchInfo$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return axios.get(\"/api/batch\");\n\n        case 3:\n          infoDetailsResponse = _context.sent;\n          // THEN SEND TO REDUX\n          console.log('saga response!', infoDetailsResponse.data); // PUT IS DISPATCH\n\n          _context.next = 7;\n          return put({\n            type: 'SET_INFO',\n            payload: infoDetailsResponse.data\n          });\n\n        case 7:\n          _context.next = 12;\n          break;\n\n        case 9:\n          _context.prev = 9;\n          _context.t0 = _context[\"catch\"](0);\n          console.log(_context.t0);\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 9]]);\n}\n\nfunction putBatchInfo(action) {\n  return _regeneratorRuntime.wrap(function putBatchInfo$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return axios.post(\"/api/batch\", action.payload);\n\n        case 3:\n          _context2.next = 5;\n          return put({\n            type: 'FETCH_BATCH_ INFO'\n          });\n\n        case 5:\n          _context2.next = 10;\n          break;\n\n        case 7:\n          _context2.prev = 7;\n          _context2.t0 = _context2[\"catch\"](0);\n          console.log('ERROR IN POST', _context2.t0);\n\n        case 10:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 7]]);\n}\n\nfunction removeBatchInfo(action) {\n  var id;\n  return _regeneratorRuntime.wrap(function removeBatchInfo$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          console.log(action.payload);\n          id = action.payload.id;\n          console.log(id);\n          _context3.next = 6;\n          return axios.delete(\"/api/batch/\".concat(id), {\n            user_id: action.payload\n          });\n\n        case 6:\n          _context3.next = 8;\n          return put({\n            type: 'FETCH_BATCH_INFO'\n          });\n\n        case 8:\n          _context3.next = 13;\n          break;\n\n        case 10:\n          _context3.prev = 10;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.log(_context3.t0);\n\n        case 13:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 10]]);\n}\n\nfunction batchSaga() {\n  return _regeneratorRuntime.wrap(function batchSaga$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest('FETCH_BATCH_INFO', fetchBatchInfo);\n\n        case 2:\n          _context4.next = 4;\n          return takeLatest('POST_INFO', putBatchInfo);\n\n        case 4:\n          _context4.next = 6;\n          return takeLatest('DELETE_INFO', removeBatchInfo);\n\n        case 6:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nexport default batchSaga;","map":{"version":3,"sources":["/Users/mileslacek/prime/tier3/prime-solo-project-master/src/redux/sagas/batchSaga.js"],"names":["fetchBatchInfo","putBatchInfo","removeBatchInfo","batchSaga","put","takeLatest","axios","get","infoDetailsResponse","console","log","data","type","payload","action","post","id","delete","user_id"],"mappings":";;;;yBAIUA,c;;;yBAiBAC,Y;;;yBAoBAC,e;;;yBAeAC,S;;AAxDV,SAASC,GAAT,EAAcC,UAAd,QAAiC,oBAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAGA,SAAUN,cAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGoC,iBAAMM,KAAK,CAACC,GAAN,cAAN;;AAHpC;AAGcC,UAAAA,mBAHd;AAIQ;AACAC,UAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BF,mBAAmB,CAACG,IAAlD,EALR,CAMQ;;AANR;AAOQ,iBAAMP,GAAG,CAAE;AACPQ,YAAAA,IAAI,EAAE,UADC;AAEPC,YAAAA,OAAO,EAAEL,mBAAmB,CAACG;AAFtB,WAAF,CAAT;;AAPR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAaQF,UAAAA,OAAO,CAACC,GAAR;;AAbR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAiBA,SAAUT,YAAV,CAAuBa,MAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGQ,iBAAMR,KAAK,CAACS,IAAN,eAAyBD,MAAM,CAACD,OAAhC,CAAN;;AAHR;AAAA;AAYQ,iBAAMT,GAAG,CAAE;AACPQ,YAAAA,IAAI,EAAE;AADC,WAAF,CAAT;;AAZR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAgBQH,UAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;;AAhBR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAoBA,SAAUR,eAAV,CAA0BY,MAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEQL,UAAAA,OAAO,CAACC,GAAR,CAAYI,MAAM,CAACD,OAAnB;AACIG,UAAAA,EAHZ,GAGiBF,MAAM,CAACD,OAAP,CAAeG,EAHhC;AAIQP,UAAAA,OAAO,CAACC,GAAR,CAAYM,EAAZ;AAJR;AAMQ,iBAAMV,KAAK,CAACW,MAAN,sBAA2BD,EAA3B,GAAiC;AAACE,YAAAA,OAAO,EAAEJ,MAAM,CAACD;AAAjB,WAAjC,CAAN;;AANR;AAAA;AAOQ,iBAAMT,GAAG,CAAE;AACPQ,YAAAA,IAAI,EAAE;AADC,WAAF,CAAT;;AAPR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAWQH,UAAAA,OAAO,CAACC,GAAR;;AAXR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAeA,SAAUP,SAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAME,UAAU,CAAC,kBAAD,EAAqBL,cAArB,CAAhB;;AADJ;AAAA;AAEI,iBAAMK,UAAU,CAAC,WAAD,EAAcJ,YAAd,CAAhB;;AAFJ;AAAA;AAGI,iBAAMI,UAAU,CAAC,aAAD,EAAgBH,eAAhB,CAAhB;;AAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAMA,eAAeC,SAAf","sourcesContent":["import { put, takeLatest, } from \"redux-saga/effects\";\nimport axios from \"axios\";\n\n\nfunction* fetchBatchInfo() {\n    try{\n        // GET THE INFO FROM OUR SERVER\n        const infoDetailsResponse = yield axios.get(`/api/batch`);\n        // THEN SEND TO REDUX\n        console.log('saga response!', infoDetailsResponse.data);\n        // PUT IS DISPATCH\n        yield put ({\n            type: 'SET_INFO',\n            payload: infoDetailsResponse.data\n        });\n        \n    }catch (error) {\n        console.log(error);\n    }\n}\n\nfunction* putBatchInfo(action) {\n    try{\n        // POST THE ITEMS FROM OUR SERVER\n        yield axios.post(`/api/batch`, action.payload)\n        // {beer_style: action.payload.beer_style},\n        // {beer_name: action.payload.beer_name},\n        // {batch_number: action.payload.batch_number},\n        // {hlt_temp: action.payload.hlt_temp},\n        // {mash_in_temp: action.payload.mash_in_temp},\n        // {mash_out_temp: action.payload.mash_out_temp},\n        // {boil_time: action.payload.boil_time},\n        // {notes: action.payload.notes});\n        yield put ({\n            type: 'FETCH_BATCH_ INFO',\n        })\n    }catch(error){\n        console.log('ERROR IN POST', error);\n    }\n}\n\nfunction* removeBatchInfo(action) {\n    try{\n        console.log(action.payload);\n        let id = action.payload.id\n        console.log(id);\n        \n        yield axios.delete(`/api/batch/${id}`, {user_id: action.payload});\n        yield put ({\n            type: 'FETCH_BATCH_INFO'\n        })\n    }catch(error){\n        console.log(error);\n    }\n}\n\nfunction* batchSaga() {\n    yield takeLatest('FETCH_BATCH_INFO', fetchBatchInfo);\n    yield takeLatest('POST_INFO', putBatchInfo);\n    yield takeLatest('DELETE_INFO', removeBatchInfo);\n}\n\nexport default batchSaga;"]},"metadata":{},"sourceType":"module"}